// Package genserve provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package genserve

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// CreateOrder defines model for CreateOrder.
type CreateOrder struct {
	// Delivery Address
	Address     string  `json:"address"`
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Products    []int   `json:"products"`
}

// Delivery defines model for Delivery.
type Delivery struct {
	Address      *string `json:"address,omitempty"`
	Complete     *bool   `json:"complete,omitempty"`
	DeliveryDate *string `json:"delivery_date,omitempty"`
	Id           *int    `json:"id,omitempty"`
	OrderId      *int    `json:"order_id,omitempty"`
}

// Order defines model for Order.
type Order struct {
	// Delivery Address
	Address     string    `json:"address"`
	Delivery    *Delivery `json:"delivery,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Products    []Product `json:"products"`
}

// Product defines model for Product.
type Product struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	// The limit
	Limit *int `json:"limit,omitempty"`

	// The offset
	Offset *int `json:"offset,omitempty"`
}

// AddOrderJSONBody defines parameters for AddOrder.
type AddOrderJSONBody CreateOrder

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// The limit
	Limit *int `json:"limit,omitempty"`

	// The offset
	Offset *int `json:"offset,omitempty"`
}

// AddProductJSONBody defines parameters for AddProduct.
type AddProductJSONBody Product

// AddOrderJSONRequestBody defines body for AddOrder for application/json ContentType.
type AddOrderJSONRequestBody AddOrderJSONBody

// AddProductJSONRequestBody defines body for AddProduct for application/json ContentType.
type AddProductJSONRequestBody AddProductJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all or limit count orders from the store
	// (GET /order)
	GetOrders(w http.ResponseWriter, r *http.Request, params GetOrdersParams)
	// Place an order for a product
	// (POST /order)
	AddOrder(w http.ResponseWriter, r *http.Request)
	// Delete purchase order by ID
	// (DELETE /order/{orderId})
	DeleteOrder(w http.ResponseWriter, r *http.Request, orderId int)
	// Find purchase order by ID
	// (GET /order/{orderId})
	GetOrderById(w http.ResponseWriter, r *http.Request, orderId int)
	// Get all or limit count products from the store
	// (GET /product)
	GetProducts(w http.ResponseWriter, r *http.Request, params GetProductsParams)
	// Add a new order to the store
	// (POST /product)
	AddProduct(w http.ResponseWriter, r *http.Request)
	// Delete product by id from the store
	// (DELETE /product/{product_id})
	DeleteProduct(w http.ResponseWriter, r *http.Request, productId int)
	// Get product by id from the store
	// (GET /product/{product_id})
	GetProductById(w http.ResponseWriter, r *http.Request, productId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrders(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddOrder operation middleware
func (siw *ServerInterfaceWrapper) AddOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameter("simple", false, "orderId", chi.URLParam(r, "orderId"), &orderId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrder(w, r, orderId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int

	err = runtime.BindStyledParameter("simple", false, "orderId", chi.URLParam(r, "orderId"), &orderId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderById(w, r, orderId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProducts(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddProduct operation middleware
func (siw *ServerInterfaceWrapper) AddProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddProduct(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId int

	err = runtime.BindStyledParameter("simple", false, "product_id", chi.URLParam(r, "product_id"), &productId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "product_id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProduct(w, r, productId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProductById operation middleware
func (siw *ServerInterfaceWrapper) GetProductById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId int

	err = runtime.BindStyledParameter("simple", false, "product_id", chi.URLParam(r, "product_id"), &productId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "product_id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProductById(w, r, productId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/order", wrapper.GetOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/order", wrapper.AddOrder)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/order/{orderId}", wrapper.DeleteOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/order/{orderId}", wrapper.GetOrderById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/product", wrapper.GetProducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/product", wrapper.AddProduct)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/product/{product_id}", wrapper.DeleteProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/product/{product_id}", wrapper.GetProductById)
	})

	return r
}
