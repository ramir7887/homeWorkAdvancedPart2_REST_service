{
  "openapi": "3.0.0",
  "info": {
    "description": "This is a sample server Store server.",
    "version": "1.0.0",
    "title": "Store",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "ramir7887@yandex.ru"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "product",
      "description": "Everything about Products",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://stepik.org/lesson/684977/step/1"
      }
    },
    {
      "name": "order",
      "description": "Access to Store orders"
    }
  ],
  "paths": {
    "/product": {
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Add a new order to the store",
        "description": "",
        "operationId": "addProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "description": "Product object that needs to be added to the store",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get all or limit count products from the store",
        "description": "",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/product/{product_id}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get product by id from the store",
        "description": "",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "product"
        ],
        "summary": "Delete product by id from the store",
        "description": "",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "ID of product to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Place an order for a product",
        "description": "",
        "operationId": "addOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrder"
              }
            }
          },
          "description": "order placed for purchasing the order",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      },
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get all or limit count orders from the store",
        "description": "",
        "operationId": "getOrders",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/order/{orderId}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1.         Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "order"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Store",
    "url": "https://stepik.org/lesson/684977/step/1"
  },
  "servers": [
    {
      "url": "http://localhost:8081/api",
      "description": "API endpoint"
    }
  ],
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "required": [
          "name",
          "price"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "CreateOrder": {
        "type": "object",
        "required": [
          "address",
          "products"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string",
            "format": "text"
          },
          "address": {
            "type": "string",
            "description": "Delivery Address"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "default": []
          }
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "address",
          "products"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string",
            "format": "text"
          },
          "address": {
            "type": "string",
            "description": "Delivery Address"
          },
          "delivery": {
            "$ref": "#/components/schemas/Delivery"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "Delivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "order_id": {
            "type": "integer"
          },
          "delivery_date": {
            "type": "string",
            "format": "datetime"
          },
          "complete": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          }
        }
      }
    }
  }
}